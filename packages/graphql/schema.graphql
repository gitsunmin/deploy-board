interface Node {
  id: ID!
}

type Document {
  title: String!
  description: String!
}

type Deployment implements Node {
  id: ID!
  name: String!
  description: String
  status: DeploymentStatus!
  deployer: String!
  createdAt: String!
  updatedAt: String!
  dependsOn: [ID!]
}

enum DeploymentStatus {
  YET
  PENDING
  IN_PROGRESS
  SUCCESS
  FAILED
}

input DeploymentInput {
  name: String!
  description: String!
  deployer: String!
  status: DeploymentStatus!
  dependsOn: [ID!]
}

input DocumentInput {
  title: String!
  description: String!
}

type Query {
  document: Document!
  deployments: [Deployment!]!
}

type Mutation {
  createDeployment(input: DeploymentInput!): Deployment!
  updateDeployment(id: ID!, input: DeploymentInput!): Deployment!
  deleteDeployment(id: ID!): Boolean!
  updateDocument(input: DocumentInput!): Document!
}

type Subscription {
  documentUpdated: Document!
  deploymentUpdated: [Deployment!]!
  deploymentCreated: [Deployment!]!
  deploymentDeleted: [Deployment!]!
}
